{"remainingRequest":"/Users/zkk/code/program/admin-system/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/zkk/code/program/admin-system/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zkk/code/program/admin-system/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zkk/code/program/admin-system/node_modules/vue-image-crop-upload/upload-1.vue?vue&type=template&id=251b0a96&","dependencies":[{"path":"/Users/zkk/code/program/admin-system/node_modules/vue-image-crop-upload/upload-1.vue","mtime":499162500000},{"path":"/Users/zkk/code/program/admin-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zkk/code/program/admin-system/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/zkk/code/program/admin-system/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zkk/code/program/admin-system/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7CiAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgIHZhbHVlOiBfdm0udmFsdWUsCiAgICAgICAgICBleHByZXNzaW9uOiAidmFsdWUiCiAgICAgICAgfQogICAgICBdLAogICAgICBzdGF0aWNDbGFzczogInZ1ZS1pbWFnZS1jcm9wLXVwbG9hZCIKICAgIH0sCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC13cmFwIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLWNsb3NlIiwgb246IHsgY2xpY2s6IF92bS5vZmYgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLWljb240IiB9KQogICAgICAgIF0pLAogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uc3RlcCA9PSAxLAogICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInN0ZXAgPT0gMSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1zdGVwMSIKICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1kcm9wLWFyZWEiLAogICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgZHJhZ2xlYXZlOiBfdm0ucHJldmVudERlZmF1bHQsCiAgICAgICAgICAgICAgICAgIGRyYWdvdmVyOiBfdm0ucHJldmVudERlZmF1bHQsCiAgICAgICAgICAgICAgICAgIGRyYWdlbnRlcjogX3ZtLnByZXZlbnREZWZhdWx0LAogICAgICAgICAgICAgICAgICBjbGljazogX3ZtLmhhbmRsZUNsaWNrLAogICAgICAgICAgICAgICAgICBkcm9wOiBfdm0uaGFuZGxlQ2hhbmdlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImkiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvYWRpbmcgIT0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxvYWRpbmcgIT0gMSIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1pY29uMSIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInZpY3AtaWNvbjEtYXJyb3ciIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInZpY3AtaWNvbjEtYm9keSIgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1pY29uMS1ib3R0b20iIH0pCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvYWRpbmcgIT09IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJsb2FkaW5nICE9PSAxIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aWNwLWhpbnQiCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5sYW5nLmhpbnQpKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIV92bS5pc1N1cHBvcnRlZCwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIiFpc1N1cHBvcnRlZCIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1uby1zdXBwb3J0ZWQtaGludCIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmxhbmcubm9TdXBwb3J0ZWQpKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uc3RlcCA9PSAxCiAgICAgICAgICAgICAgICAgID8gX2MoImlucHV0IiwgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiZmFsc2UiCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAiZWwiLAogICAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LWVsOmZpbGVpbnB1dCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnOiAiZmlsZWlucHV0IgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogImZpbGUiIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogeyBjaGFuZ2U6IF92bS5oYW5kbGVDaGFuZ2UgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhhc0Vycm9yLAogICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJoYXNFcnJvciIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1lcnJvciIKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInZpY3AtaWNvbjIiIH0pLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0uZXJyb3JNc2cpICsgIiAiKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLW9wZXJhdGUiIH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgb246IHsgY2xpY2s6IF92bS5vZmYsIG1vdXNlZG93bjogX3ZtLnJpcHBsZSB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmxhbmcuYnRuLm9mZikpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5zdGVwID09IDIKICAgICAgICAgID8gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLXN0ZXAyIiB9LCBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLWNyb3AiIH0sIFsKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1jcm9wLWxlZnQiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ2aWNwLWltZy1jb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgICB7IG5hbWU6ICJlbCIsIHJhd05hbWU6ICJ2LWVsOmltZyIsIGFyZzogImltZyIgfQogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1pbWciLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS5zb3VyY2VJbWdTdHlsZSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLnNvdXJjZUltZ1VybCwgZHJhZ2dhYmxlOiAiZmFsc2UiIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBkcmFnOiBfdm0ucHJldmVudERlZmF1bHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdzdGFydDogX3ZtLnByZXZlbnREZWZhdWx0LAogICAgICAgICAgICAgICAgICAgICAgICBkcmFnZW5kOiBfdm0ucHJldmVudERlZmF1bHQsCiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdsZWF2ZTogX3ZtLnByZXZlbnREZWZhdWx0LAogICAgICAgICAgICAgICAgICAgICAgICBkcmFnb3ZlcjogX3ZtLnByZXZlbnREZWZhdWx0LAogICAgICAgICAgICAgICAgICAgICAgICBkcmFnZW50ZXI6IF92bS5wcmV2ZW50RGVmYXVsdCwKICAgICAgICAgICAgICAgICAgICAgICAgZHJvcDogX3ZtLnByZXZlbnREZWZhdWx0LAogICAgICAgICAgICAgICAgICAgICAgICB0b3VjaHN0YXJ0OiBfdm0uaW1nU3RhcnRNb3ZlLAogICAgICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IF92bS5pbWdNb3ZlLAogICAgICAgICAgICAgICAgICAgICAgICB0b3VjaGVuZDogX3ZtLmNyZWF0ZUltZywKICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hjYW5jZWw6IF92bS5jcmVhdGVJbWcsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlZG93bjogX3ZtLmltZ1N0YXJ0TW92ZSwKICAgICAgICAgICAgICAgICAgICAgICAgbW91c2Vtb3ZlOiBfdm0uaW1nTW92ZSwKICAgICAgICAgICAgICAgICAgICAgICAgbW91c2V1cDogX3ZtLmNyZWF0ZUltZywKICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VvdXQ6IF92bS5jcmVhdGVJbWcKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aWNwLWltZy1zaGFkZSB2aWNwLWltZy1zaGFkZS0xIiwKICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0uc291cmNlSW1nU2hhZGVTdHlsZQogICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpY3AtaW1nLXNoYWRlIHZpY3AtaW1nLXNoYWRlLTIiLAogICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IF92bS5zb3VyY2VJbWdTaGFkZVN0eWxlCiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1yYW5nZSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJyYW5nZSIsIHN0ZXA6ICIxIiwgbWluOiAiMCIsIG1heDogIjEwMCIgfSwKICAgICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0uc2NhbGUucmFuZ2UgfSwKICAgICAgICAgICAgICAgICAgICAgIG9uOiB7IGlucHV0OiBfdm0uem9vbUNoYW5nZSB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpY3AtaWNvbjUiLAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duOiBfdm0uc3RhcnRab29tU3ViLAogICAgICAgICAgICAgICAgICAgICAgICBtb3VzZW91dDogX3ZtLmVuZFpvb21TdWIsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNldXA6IF92bS5lbmRab29tU3ViCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpY3AtaWNvbjYiLAogICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duOiBfdm0uc3RhcnRab29tQWRkLAogICAgICAgICAgICAgICAgICAgICAgICBtb3VzZW91dDogX3ZtLmVuZFpvb21BZGQsCiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNldXA6IF92bS5lbmRab29tQWRkCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICFfdm0ubm9Sb3RhdGUKICAgICAgICAgICAgICAgICAgICA/IF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1yb3RhdGUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IG9uOiB7IGNsaWNrOiBfdm0ucm90YXRlSW1nIH0gfSwgW192bS5fdigi4oa6IildKQogICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpCiAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1jcm9wLXJpZ2h0IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1wcmV2aWV3IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgIV92bS5ub1NxdWFyZQogICAgICAgICAgICAgICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZpY3AtcHJldmlldy1pdGVtIiB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0ucHJldmlld1N0eWxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0uY3JlYXRlSW1nVXJsIH0KICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygic3BhbiIsIFtfdm0uX3YoX3ZtLl9zKF92bS5sYW5nLnByZXZpZXcpKV0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgICAgICFfdm0ubm9DaXJjbGUKICAgICAgICAgICAgICAgICAgICAgID8gX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2aWNwLXByZXZpZXctaXRlbSB2aWNwLXByZXZpZXctaXRlbS1jaXJjbGUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLnByZXZpZXdTdHlsZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0uY3JlYXRlSW1nVXJsIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoInNwYW4iLCBbX3ZtLl92KF92bS5fcyhfdm0ubGFuZy5wcmV2aWV3KSldKQogICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZpY3Atb3BlcmF0ZSIgfSwgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2V0U3RlcCgxKQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIG1vdXNlZG93bjogX3ZtLnJpcHBsZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmxhbmcuYnRuLmJhY2spKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aWNwLW9wZXJhdGUtYnRuIiwKICAgICAgICAgICAgICAgICAgICBvbjogeyBjbGljazogX3ZtLnByZXBhcmVVcGxvYWQsIG1vdXNlZG93bjogX3ZtLnJpcHBsZSB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5sYW5nLmJ0bi5zYXZlKSldCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgX3ZtLnN0ZXAgPT0gMwogICAgICAgICAgPyBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZpY3Atc3RlcDMiIH0sIFsKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZpY3AtdXBsb2FkIiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInNwYW4iLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvYWRpbmcgPT09IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJsb2FkaW5nID09PSAxIgogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aWNwLWxvYWRpbmciCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKF92bS5sYW5nLmxvYWRpbmcpKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInZpY3AtcHJvZ3Jlc3Mtd3JhcCIgfSwgWwogICAgICAgICAgICAgICAgICBfYygic3BhbiIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubG9hZGluZyA9PT0gMSwKICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogImxvYWRpbmcgPT09IDEiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpY3AtcHJvZ3Jlc3MiLAogICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0ucHJvZ3Jlc3NTdHlsZQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJzaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaGFzRXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJoYXNFcnJvciIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1lcnJvciIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInZpY3AtaWNvbjIiIH0pLAogICAgICAgICAgICAgICAgICAgIF92bS5fdigiICIgKyBfdm0uX3MoX3ZtLmVycm9yTXNnKSArICIgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1zaG93IiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5sb2FkaW5nID09PSAyLAogICAgICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAibG9hZGluZyA9PT0gMiIKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmljcC1zdWNjZXNzIgogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1pY29uMyIgfSksCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgIiArIF92bS5fcyhfdm0ubGFuZy5zdWNjZXNzKSArICIgIikKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmljcC1vcGVyYXRlIiB9LCBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zZXRTdGVwKDIpCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duOiBfdm0ucmlwcGxlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhfdm0ubGFuZy5idG4uYmFjaykpXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF9jKCJhIiwgeyBvbjogeyBjbGljazogX3ZtLm9mZiwgbW91c2Vkb3duOiBfdm0ucmlwcGxlIH0gfSwgWwogICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5sYW5nLmJ0bi5jbG9zZSkpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgIF9jKCJjYW52YXMiLCB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLAogICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmYWxzZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgeyBuYW1lOiAiZWwiLCByYXdOYW1lOiAidi1lbDpjYW52YXMiLCBhcmc6ICJjYW52YXMiIH0KICAgICAgICAgIF0sCiAgICAgICAgICBhdHRyczogeyB3aWR0aDogX3ZtLndpZHRoLCBoZWlnaHQ6IF92bS5oZWlnaHQgfQogICAgICAgIH0pCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}